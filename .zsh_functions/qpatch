#!/usr/bin/env zsh

qpatch() {
  local usage="\n\nUsage: qpatch RESOURCE_TYPE RESOURCE_NAME PATCH_1 [PATCH_2 PATCH_3...]\nE.g.: \`qpatch sts detection '{\"name\": \"container_1\", \"command\": [\"bash\", \"-c\"], \"args\": [\"sleep 365d\"]}'\`"
  if [[ "$1" == "-h" ]]; then
    echo "Apply a patch to a resource.${usage}"
    return
  elif [[ "$#" < 2 ]]; then
    >&2 echo "ERROR: qpatch requires at least 3 arguments!${usage}"
    return 1
  fi

  local resource_type=${1}
  local resource_name=${2}
  local patches=(${@:3})
  local resource_is_pod=$([[ "${resource_type}" =~ ^(po|pod)$ ]] && echo "1")

  # Handle configmaps different:
  if [[ "${resource_type}" =~ ^(cm|configmap)$ ]]; then
    kubectl patch "${resource_type}" "${resource_name}" -p "${patches}"
    return
  fi

  # Merge all patches as a single patch
  patches=$(printf ",%s" "${patches[@]}");  # Concatenate as string
  patches=${patches:1}  # Remove leading comma
  local finalPatch='{"spec": {"containers": ['${patches}']}}}}'
  if [[ -z ${resource_is_pod} ]]; then
    finalPatch='{"spec": {"template": '${finalPatch}'}}'
  fi

  # echo "DOING: $finalPatch"
  kubectl patch "${resource_type}" "${resource_name}" -p "${finalPatch}"
}
