#compdef cs_addgpu qcontainers qdebug qdisplay qpatch qpf

_qresource_containers() {
  local COMPREPLY=()  # Make sure to reset COMPREPLY, some commands export COMPREPLY so you'd get completions from the previous <TAB> press as well
  local COMP_WORDS=( "${words[@]:1}" )  # Easier to work with [1,N] than [2,N+1]
  local COMP_CWORD=$(( ${CURRENT} - 1 ))  # Easier to work with [1,N] than [2,N+1]

  # Make sure we haven't reached the max number of args for this service
  local max_args=3
  case ${service} in
    qcontainers|qpatch|qpf) max_args=2 ;;
    qdisplay) COMP_WORDS=( "pod" "${COMP_WORDS[@]}" ); COMP_CWORD=$(( COMP_CWORD + 1 )) ;;  # Pretend that the first argument is always "pod"
  esac
  if [[ ${COMP_CWORD} > ${max_args} ]]; then return 1; fi

  # Perform the completion based on the argument number
  case ${COMP_CWORD} in
    1) __kubectl_get_resource; compadd $COMPREPLY ;;  # Reuse completion for `kubectl get`
    2) __kubectl_parse_get "${COMP_WORDS[1]}"; compadd $COMPREPLY ;;  # Reuse completion for `kubectl get ${COMP_WORDS[1]}`
    3) compadd $(qcontainers ${COMP_WORDS[@]:0:2}) ;;  # Autocomplete based on names of containers in `kubectl get ${COMP_WORDS[1]} ${COMP_WORDS[2]}`
  esac
}
